{"remainingRequest":"/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/joebrundage/Desktop/blog/front-end/blog/src/views/Edit.vue?vue&type=template&id=01f5e778&","dependencies":[{"path":"/Users/joebrundage/Desktop/blog/front-end/blog/src/views/Edit.vue","mtime":1638658968892},{"path":"/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/cache-loader/dist/cjs.js","mtime":1638565186213},{"path":"/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1638565188471},{"path":"/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/cache-loader/dist/cjs.js","mtime":1638565186213},{"path":"/Users/joebrundage/Desktop/blog/front-end/blog/node_modules/vue-loader/lib/index.js","mtime":1638565187852}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}